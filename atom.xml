<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>山河小记</title>
  <subtitle>专业、激情、勤奋、坚持</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2016-10-16T05:19:09.000Z</updated>
  <id>/</id>
  
  <author>
    <name>联民</name>
    <email>406400939@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>优化hexo打包后的代码</title>
    <link href="/2016/10/09/hexo-gulpfile/"/>
    <id>/2016/10/09/hexo-gulpfile/</id>
    <published>2016-10-09T12:13:06.000Z</published>
    <updated>2016-10-16T05:19:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们都知道<code>hexo</code>执行<code>hexo g</code>命令之后 ，会生成<code>/public</code>文件夹， 这是我们最终将要发布到线上的最终内容。 而由于各个hexo的主题中质量不一致，让<code>/public</code>文件夹还会有一定的优化空间， 我们需要对此文件夹进行一次基本的前端优化：</p>
<ul>
<li>压缩图片</li>
<li>html 压缩</li>
<li>css 压缩</li>
<li>js 压缩</li>
</ul>
<p>本文总结一个试验后的可行方法。</p>
<h2 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1. 安装依赖"></a>1. 安装依赖</h2><p>建议安装淘宝的<a href="https://npm.taobao.org/" target="_blank" rel="external">cnpm</a>提速。</p>
<blockquote>
<p>(c)npm i gulp gulp gulp-uglify gulp-minify-css gulp-htmlmin gulp-minify-inline gulp-imagemin –save-dev</p>
</blockquote>
<h2 id="2-创建gulpfile-js"><a href="#2-创建gulpfile-js" class="headerlink" title="2. 创建gulpfile.js"></a>2. 创建gulpfile.js</h2><p>在hexo blog文件夹下创建<code>gulpfile.js</code>:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span></div><div class="line">  gulp         = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">  uglify       = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>),</div><div class="line">  cssmin       = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>),</div><div class="line">  htmlmin      = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>),</div><div class="line">  minifyInline = <span class="built_in">require</span>(<span class="string">'gulp-minify-inline'</span>),</div><div class="line">  imagemin     = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</div><div class="line"></div><div class="line"><span class="comment">//JS压缩</span></div><div class="line">gulp.task(<span class="string">'uglify'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'././public/**/*.js'</span>)</div><div class="line">    .pipe(uglify())</div><div class="line">    .pipe(gulp.dest(<span class="string">'././public/'</span>));</div><div class="line">&#125;);</div><div class="line"><span class="comment">//CSS压缩</span></div><div class="line">gulp.task(<span class="string">'cssmin'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'././public/**/*.css'</span>)</div><div class="line">    .pipe(cssmin())</div><div class="line">    .pipe(gulp.dest(<span class="string">'././public/'</span>));</div><div class="line">&#125;);</div><div class="line"><span class="comment">//图片压缩</span></div><div class="line">gulp.task(<span class="string">'images'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  gulp.src(<span class="string">'././public/*.*'</span>)</div><div class="line">    .pipe(imagemin(&#123;</div><div class="line">      <span class="attr">progressive</span>: <span class="literal">false</span></div><div class="line">    &#125;))</div><div class="line">    .pipe(gulp.dest(<span class="string">'././public/'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//html压缩</span></div><div class="line">gulp.task(<span class="string">'htmlmin'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'././public/**/*.html'</span>)</div><div class="line">    .pipe(htmlmin(&#123;<span class="attr">collapseWhitespace</span>: <span class="literal">true</span>&#125;))</div><div class="line">    .pipe(minifyInline())</div><div class="line">    .pipe(gulp.dest(<span class="string">'././public/'</span>));</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'build'</span>, [<span class="string">'uglify'</span>, <span class="string">'cssmin'</span>, <span class="string">'images'</span>, <span class="string">'htmlmin'</span>]);</div></pre></td></tr></table></figure>
<h3 id="3-执行优化命令"><a href="#3-执行优化命令" class="headerlink" title="3. 执行优化命令"></a>3. 执行优化命令</h3><p>清空hexo public文件夹</p>
<blockquote>
<p>hexo clean<br>hexo g<br>gulp build</p>
</blockquote>
<p>连续执行3个命令太麻烦， 可以直接在<code>package.json</code>文件中生成写入<code>scripts</code>:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="string">"scripts"</span>: &#123;</div><div class="line">  <span class="string">"build"</span>: <span class="string">"hexo clean &amp;&amp; hexo g &amp;&amp; gulp build"</span></div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>然后直接执行如下命令就可以了</p>
<blockquote>
<p>npm run build</p>
</blockquote>
<p>至此，可以得到一个html、css、js、image都更优化的<code>/public</code>文件夹，最后再用各种评测工具测试一下你的博客打开速度吧！~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们都知道&lt;code&gt;hexo&lt;/code&gt;执行&lt;code&gt;hexo g&lt;/code&gt;命令之后 ，会生成&lt;code&gt;/public&lt;/code&gt;文件夹， 这是我们最终将要发布到线上的最终内容。 而由于各个hexo的主题中质量不一致，让&lt;code&gt;/public&lt;/code&gt;
    
    </summary>
    
      <category term="小记" scheme="/categories/%E5%B0%8F%E8%AE%B0/"/>
    
    
      <category term="hexo" scheme="/tags/hexo/"/>
    
      <category term="gulpfile" scheme="/tags/gulpfile/"/>
    
      <category term="hexo minify" scheme="/tags/hexo-minify/"/>
    
  </entry>
  
  <entry>
    <title>editorconfig 使用</title>
    <link href="/2016/10/09/editorconfig/"/>
    <id>/2016/10/09/editorconfig/</id>
    <published>2016-10-09T12:13:06.000Z</published>
    <updated>2016-10-16T03:41:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>由于团队成员开发经历、熟悉的编辑器及开发习惯等的不同，在协作开发的时候往往会遇到许多因代码风格而引起的尴尬问题。比如，协作开发过程中各成员之间代码一致，只是因tab缩进，行尾换行符，多余空格等而差异导致VCS产生了冲突。</p>
<p>Editorconfig是一款帮助开发者在不同编辑器或IDE之间定义和保持代码风格的工具。它包含了两部分内容：代码风格规则定义&amp;支持此规则的一系列编辑器插件。</p>
<p>本文根据<a href="http://editorconfig.org/" target="_blank" rel="external">editorconfig</a>官网的内容，结合常规开发所能遇到的情况，为大家介绍一下其用法</p>
<h1 id="Editorconfig的特点"><a href="#Editorconfig的特点" class="headerlink" title="Editorconfig的特点:"></a>Editorconfig的特点:</h1><ul>
<li>支持一套统一的代码风格</li>
<li>跨编辑器</li>
<li>配置简单、快捷</li>
</ul>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="1-通配符匹配规则"><a href="#1-通配符匹配规则" class="headerlink" title="1.通配符匹配规则"></a>1.通配符匹配规则</h2><p><img src="/assets/img/1.png" alt=""></p>
<ul>
<li><p>[] 匹配规则是从当前目录算起;</p>
</li>
<li><p>?只能匹配且必须有    如<code>f1.js</code>、<code>f2.js</code>、<code>f12.js</code>通过f??.js只能匹配到 <code>f12.js</code>，而f**.js可以匹配到所有;</p>
</li>
<li><p>{s1,s2,s3}之间不能有空格。[{f1.js, f2.js, f3.js}] 无法匹配<code>f2.js</code>,<code>f3.js</code>;</p>
</li>
<li><p><code>*</code>和<code>**</code>可以匹配空字符串   如<code>f*.js</code>可以匹配<code>f.js</code></p>
</li>
<li><p>多个匹配之间的规则如果不冲突是可以合并的</p>
</li>
<li><p>优先级问题（有点类似于css ）</p>
<p>  如果两个匹配所定义的规则冲突，则会以最靠近打开文件的<code>.editorconfig</code>文件为准;</p>
<p>  如果同一个文件中匹配定义冲突，则会以最后定义的为准。所以在定义规则的时候，须先定义通用规则，后定义特殊规则。</p>
</li>
</ul>
<h2 id="2-支持属性"><a href="#2-支持属性" class="headerlink" title="2.支持属性"></a>2.支持属性</h2><p><img src="/assets/img/2.png" alt=""></p>
<pre><code>注：

1.所有属性设置大小写敏感，使用小写；

2.`.editorconfig`文件的使用规则：

    当打开一个文件的时候，IDE中安装的Editorconfig组件会在当前文件目录以及其父目录查找.editorconfig文件。当到达根目录或者查找到一个editorconfig文件中root=true时，停止查找。

    查找顺序从根目录（或root=true文件夹）到当前目录，最接近当前打开文件的.editorconfig会最后被读取，这些文件中所设置的属性越靠近当前打开文件，优先级越高

3.Windows中由于扩展规则限制，可通过输入&apos;.editorconfig.&apos;生成配置文件
</code></pre><h1 id="常用IDE下载链接"><a href="#常用IDE下载链接" class="headerlink" title="常用IDE下载链接"></a>常用IDE下载链接</h1><ul>
<li>Notepad++:        <a href="https://github.com/editorconfig/editorconfig-notepad-plus-plus#readme" target="_blank" rel="external">https://github.com/editorconfig/editorconfig-notepad-plus-plus#readme</a> </li>
<li>Sublime Text:     <a href="https://github.com/sindresorhus/editorconfig-sublime#readme" target="_blank" rel="external">https://github.com/sindresorhus/editorconfig-sublime#readme</a> </li>
<li>jetBrains:        <a href="https://github.com/editorconfig/editorconfig-jetbrains#readme" target="_blank" rel="external">https://github.com/editorconfig/editorconfig-jetbrains#readme</a> </li>
<li>Vim:              <a href="https://github.com/editorconfig/editorconfig-vim#readme" target="_blank" rel="external">https://github.com/editorconfig/editorconfig-vim#readme</a> </li>
<li>TextMate:         <a href="https://github.com/Mr0grog/editorconfig-textmate#readme" target="_blank" rel="external">https://github.com/Mr0grog/editorconfig-textmate#readme</a> </li>
<li>Code::Blocks:     <a href="https://github.com/editorconfig/editorconfig-codeblocks#readme" target="_blank" rel="external">https://github.com/editorconfig/editorconfig-codeblocks#readme</a></li>
</ul>
<p>支持的所有编辑器列表：</p>
<p><img src="/assets/img/3.png" alt=""></p>
<h1 id="安装举例"><a href="#安装举例" class="headerlink" title="安装举例"></a>安装举例</h1><h2 id="jetbrains-包括Intellij-IDEA-和-webstrom-安装"><a href="#jetbrains-包括Intellij-IDEA-和-webstrom-安装" class="headerlink" title="jetbrains (包括Intellij IDEA 和 webstrom) 安装"></a>jetbrains (包括Intellij IDEA 和 webstrom) 安装</h2><p>1.打开settings-&gt;plugins</p>
<p><img src="/assets/img/4.png" alt=""></p>
<p>2.选择从本地磁盘安装</p>
<p><img src="/assets/img/5.png" alt=""></p>
<p>3.选择安装插件[见附件]</p>
<h2 id="sublime-text安装"><a href="#sublime-text安装" class="headerlink" title="sublime text安装"></a>sublime text安装</h2><p>通过<code>package control</code> 输入 editorcofnig 查找安装即可</p>
<p><img src="/assets/img/6.png" alt=""></p>
<h2 id="notepad-安装"><a href="#notepad-安装" class="headerlink" title="notepad ++ 安装"></a>notepad ++ 安装</h2><p>1.打开插件管理</p>
<p><img src="/assets/img/7.png" alt=""></p>
<p>2.找到<code>editorconfig</code>,直接安装即可</p>
<h1 id="editor配置示例"><a href="#editor配置示例" class="headerlink" title="editor配置示例"></a>editor配置示例</h1><p>将.editorconfig文件(内容如下)放到项目根目录，并且对自己的IDE安装相应支持的插件即可。</p>
<pre><code># editorconfig文件定义一致的code style规范
# 根据不同的开发IDE或编辑器统一代码风格
# 详情见 editorconfig.org
root = true


[*]
end_of_line = lf
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true
indent_style = space
indent_size = 4
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;由于团队成员开发经历、熟悉的编辑器及开发习惯等的不同，在协作开发的时候往往会遇到许多因代码风格而引起的尴尬问题。比如，协作开发过程中各成员之
    
    </summary>
    
      <category term="Web前端" scheme="/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="editorconfig" scheme="/tags/editorconfig/"/>
    
      <category term="代码质量" scheme="/tags/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F/"/>
    
  </entry>
  
</feed>
